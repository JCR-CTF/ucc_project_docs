"use strict";(self.webpackChunkucc_docs=self.webpackChunkucc_docs||[]).push([[2729],{3293:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"SIMULATION/Plugins/plugins","title":"Developing UCC-Cyber Drills Plugins","description":"Introduction","source":"@site/docs/SIMULATION/Plugins/plugins.md","sourceDirName":"SIMULATION/Plugins","slug":"/SIMULATION/Plugins/","permalink":"/ucc_project_docs/docs/SIMULATION/Plugins/","draft":false,"unlisted":false,"editUrl":"https://github.com/JCR-CTF/ucc_project_docs/tree/main/docs/SIMULATION/Plugins/plugins.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Plugins","permalink":"/ucc_project_docs/docs/category/plugins"},"next":{"title":"Turorials","permalink":"/ucc_project_docs/docs/category/turorials"}}');var l=i(4848),s=i(8453);const o={},r="Developing UCC-Cyber Drills Plugins",a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Plugin Navigation Template",id:"plugin-navigation-template",level:3},{value:"Configuration",id:"configuration",level:2},{value:"config.html",id:"confightml",level:3},{value:"Adding New Routes",id:"adding-new-routes",level:2},{value:"Modifying Existing Routes",id:"modifying-existing-routes",level:2},{value:"Adding Database Tables",id:"adding-database-tables",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"developing-ucc-cyber-drills-plugins",children:"Developing UCC-Cyber Drills Plugins"})}),"\n",(0,l.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,l.jsx)(n.p,{children:"UCC-Cyber Drills features a plugin interface allowing for the modification of CTFd behavior without modifying the core UCC-Cyber Drills code. This has a number of benefits over forking and modifying UCC-Cyber Drills platform:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Your modifications and plugins can be shared more easily"}),"\n",(0,l.jsx)(n.li,{children:"UCC-Cyber Drills can be updated without losing any custom behavior"}),"\n"]}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsx)(n.p,{children:"The UCC-Cyber Drills developers will do their best to avoid introducing breaking changes, but keep in mind that the plugin interface is still under development and could change."})}),"\n",(0,l.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,l.jsx)(n.p,{children:"CTFd plugins are implemented as Python modules with some CTFd-specific files:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"CTFd\n\u2514\u2500\u2500 plugins\n   \u2514\u2500\u2500 CTFd-plugin\n       \u251c\u2500\u2500 README.md          # README file\n       \u251c\u2500\u2500 __init__.py        # Main code file loaded by CTFd\n       \u251c\u2500\u2500 requirements.txt   # Any requirements that need to be installed\n       \u2514\u2500\u2500 config.json        # Plugin configuration file\n"})}),"\n",(0,l.jsx)(n.h3,{id:"plugin-navigation-template",children:"Plugin Navigation Template"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'{% if plugins %}\n<li>\n    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" \n       aria-haspopup="true" aria-expanded="false">Plugins <span class="caret"></span></a>\n    <ul class="dropdown-menu">\n        {% for plugin in plugins %}\n            <li><a href="{{ request.script_root }}{{ plugin.route }}">{{ plugin.name }}</a></li>\n        {% endfor %}\n    </ul>\n</li>\n{% endif %}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,l.jsx)(n.h3,{id:"confightml",children:"config.html"}),"\n",(0,l.jsxs)(n.p,{children:["Previously, a static file known as ",(0,l.jsx)(n.code,{children:"config.html"})," was used to provide plugin developers a page loaded by the CTFd admin panel. Although now superseded by ",(0,l.jsx)(n.code,{children:"config.json"}),", it is still supported for backward compatibility."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"config.html"})," file for a plugin can be accessed by CTFd admins at ",(0,l.jsx)(n.code,{children:"/admin/plugins/<plugin-folder-name>"}),". If stored in CTFd-S3-plugin, it would be accessible at ",(0,l.jsx)(n.code,{children:"/admin/plugins/CTFd-S3-plugin"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"config.html"})," is rendered as a Jinja template and has access to all the same functions that CTFd exposes to Jinja. While Jinja templates can technically run arbitrary Python code, this is ancillary."]}),"\n",(0,l.jsx)(n.h2,{id:"adding-new-routes",children:"Adding New Routes"}),"\n",(0,l.jsxs)(n.p,{children:["Adding new routes in CTFd is essentially writing new Flask routes. Since the entire app is passed to the plugin, the ",(0,l.jsx)(n.code,{children:"app.route"})," decorator can add new routes."]}),"\n",(0,l.jsx)(n.p,{children:"Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from flask import render_template\n\ndef load(app):\n    @app.route('/faq', methods=['GET'])\n    def view_faq():\n        return render_template('page.html', content=\"<h1>FAQ Page</h1>\")\n"})}),"\n",(0,l.jsx)(n.h2,{id:"modifying-existing-routes",children:"Modifying Existing Routes"}),"\n",(0,l.jsxs)(n.p,{children:["Overriding existing routes in CTFd/Flask is more complex, as Flask does not strictly support it. The current approach is to modify the ",(0,l.jsx)(n.code,{children:"app.view_functions"})," dictionary, which maps routes to their handling functions."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from flask import render_template\n\ndef load(app):\n    def view_challenges():\n        return render_template('page.html', content=\"<h1>Challenges are currently closed</h1>\")\n\n    # The format for the view_functions dictionary is blueprint.view_function_name\n    app.view_functions['challenges.challenges_view'] = view_challenges\n"})}),"\n",(0,l.jsx)(n.p,{children:"To add a new method to an existing route, modify the url_map as follows:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from werkzeug.routing import Rule\n\napp.url_map.add(Rule('/challenges', endpoint='challenges.challenges_view', methods=['GET', 'POST']))\n"})}),"\n",(0,l.jsx)(n.h2,{id:"adding-database-tables",children:"Adding Database Tables"}),"\n",(0,l.jsx)(n.p,{children:"If CTFd lacks the necessary database tables or columns for your needs, use a plugin to create a new table. You can then use the previous sections' techniques to create routes or modify existing ones to access your new table."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from CTFd.models import db\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const l={},s=t.createContext(l);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);